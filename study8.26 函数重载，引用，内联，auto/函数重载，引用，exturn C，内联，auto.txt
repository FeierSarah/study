一.函数重载
1.名字修饰
在C语言中，名字修饰只是在函数名前加下划线，所以只要函数名相同就会导致冲突，
在C++中，名字修饰是由“？函数名@域名1@域名2...@@参数列表@z
a.函数名
b.所在域
c.参数列表（参数个数 或 类型 或 顺序）
这三个必须完全相同，才会冲突，即函数重载

2.exturn C
有时候在C++工程中可能需要将某些函数按照C的风格来编译，在函数前加extern "C"，或将一段代码用大括号括起来

二.引用
引用不是新定义一个变量，而是给已存在变量取了一个别名，它和它引用的变量共用同一块内存空间
引用是代替指针完成跨栈操作，所以它具备指针跨站的一切特点
引用的底层实现实际是指针

引用类型必须和引用实体是同种类型的
a. 引用在定义时必须初始化
b. 一个变量可以有多个引用
c. 引用一旦引用一个实体，再不能引用其他实体
引用和指针的不同点:
1. 引用在定义时必须初始化，指针没有要求
2. 引用在初始化时引用一个实体后，就不能再引用其他实体，而指针可以在任何时候指向任何一个同类型实体
3. 没有NULL引用，但有NULL指针
4. 在sizeof中含义不同：引用结果为引用类型的大小，但指针始终是地址空间所占字节个数(32位平台下占4个字节)
5. 引用自加即引用的实体增加1，指针自加即指针向后偏移一个类型的大小
6. 有多级指针，但是没有多级引用
7. 访问实体方式不同，指针需要显式解引用，引用编译器自己处理
8. 引用比指针使用起来相对更安全，指针可能会改变指向，且指针可能为空，也会存在野指针，无论如何操作引用都只会在变量上进行操作

三.内联函数
调用时不创建新栈而直接在调用处展开的函数即内联函数，关键字inline；
内联函数是一个对编译器的建议，如果函数过于复杂，编译器不会接受建议，改为处理普通函数
inline函数可以代替带参宏
register也是建议的作用，作为寄存器，register不可以用指针调用

宏的优缺点：
优点：
1.增强代码的复用性。
2.提高性能。
缺点：
1.不方便调试宏。（因为预编译阶段进行了替换）
2.导致代码可读性差，可维护性差，容易误用。
3.没有类型安全的检查 。
4.宏有二异性。
C++有哪些技术替代宏？
1. 常量定义 换用const
2. 函数定义 换用内联函数

四.auto
auto是一个类型修饰符，他会根据你给变量出事化的值的类型来决定自己类型
auto可以连续定义变量，类型由第一个定义的变量决定，后续不能违背这个类型，可以定义对应类型的指针和引用
参数不能包括auto类型，数组的元素类型不能包括auto类型
C++11后，auto失去原本含义
